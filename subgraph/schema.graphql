type Account @entity {
  # account bytes32 address
  id: ID!
  # this accounts positions
  positions: [Position!]! @derivedFrom(field: "account")
  # this accounts tournament entries
  tournaments: [LeaderBoard!]! @derivedFrom(field: "account")
  # unix timestamp this account was created at
  createdAt: BigInt!
}

type Tournament @entity {
  # tornament ID
  id: ID!
  # the account that started the tournament
  initiator: String!
  # the currency for prize pool / entry / rebuy fees
  currency: String!
  # the amount to be distributed to top winners
  prizePool: BigDecimal!
  # the entre fee amount
  entryFee: BigDecimal!
  # the number of participating users
  entrants: BigInt!
  # the total number of times entrants refilled their balance
  rebuyCount: BigInt!
  # the number of possible winners
  winners: BigInt!
  # unix timestamp when tournament will begin
  startTime: BigInt!
  # unix timestamp when tournament will end
  closingTime: BigInt!
  # the USD balance users get credited on signup and rebuy
  lot: BigInt!
  # the block this tournament was registered
  blockNumber: BigInt!
  # the unix timestamp tournament was created
  createdAt: BigInt!
  # True if the tournament reward is claimable
  isFinalized: Boolean!
  # the winners claim list merkle root
  merkleRoot: String!
  # the title of the tournament
  title: String!
  # tournament leader board
  leaderBoard: [LeaderBoard!]! @derivedFrom(field: "tournament")
}

type LeaderBoard @entity {
  # tournamentId-account
  id: ID!
  # the tournament this leader board is for
  tournament: Tournament!
  # the entrant account
  account: Account!
  # user tournament balance
  balance: BigDecimal!
  # the tournament reward claimed
  rewardAmountClaimed: BigDecimal!
  # number of times user refilled their balance
  rebuyCount: BigInt!
  # total positions unsettled
  openPositions: BigInt!
  # the total number of positions opened during tournament
  totalPositions: BigInt!
  # the unix timestamp when user joined tournament
  createdAt: BigInt!
}

type Market @entity {
  # pyth network oracle feed id
  id: ID!
  # unix timestamp this market was created at
  createdAt: BigInt!
  # block market was created at
  createdAtBlockNumber: BigInt!
  # the minimum expiry time in seconds
  minExpiry: BigInt!
  # the maximum expiry time in seconds
  maxExpiry: BigInt!
  # the percentage reward for winning positions
  reward: BigInt!
  # true if the market is paused and participation is temporarilly disabled
  paused: Boolean!
}

enum Option {
  HIGH
  LOW
}

type Position @entity {
  # positionId = keccak256(abi.encodePacked(marketId, sequenceId, owner))
  id: ID!
  # account
  account: Account!
  # the market this position was opened in
  market: Market!
  # amount staked as wager for position
  investment: BigDecimal!
  # predicted market directon
  option: Option!
  # the strike price for option
  strikePrice: BigInt!
  # the closing price of underlying asset
  closingPrice: BigInt!
  # true if user has excercised the option at expiry
  isExcersized: Boolean!
  # amount of profit
  profit: BigDecimal!
  # unix timestamp when position was created
  createdAt: BigInt!
  # the option expiry time
  expiryTime: BigInt!
  # tournament this position was opened for
  tournament: Tournament
}
